/* bc5b9c10c66600847126ffbde64cb38efdfd7fc0
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export type StreamsQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export type StreamsQuery = {
  __typename?: 'Query';
  streams: Array<{
    __typename?: 'Stream';
    _id: any;
    title: string;
    description: string;
    url: string;
  }>;
};
export declare const StreamsDocument: Apollo.DocumentNode;
/**
 * __useStreamsQuery__
 *
 * To run a query within a React component, call `useStreamsQuery` and pass it any options that fit your needs.
 * When your component renders, `useStreamsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStreamsQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useStreamsQuery(baseOptions?: Apollo.QueryHookOptions<StreamsQuery, StreamsQueryVariables>): Apollo.QueryResult<StreamsQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useStreamsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StreamsQuery, StreamsQueryVariables>): Apollo.LazyQueryResultTuple<StreamsQuery, Types.Exact<{
  [key: string]: never;
}>>;
export type StreamsQueryHookResult = ReturnType<typeof useStreamsQuery>;
export type StreamsLazyQueryHookResult = ReturnType<typeof useStreamsLazyQuery>;
export type StreamsQueryResult = Apollo.QueryResult<StreamsQuery, StreamsQueryVariables>;