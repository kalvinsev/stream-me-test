/* 1aa5459a5ad7e27ef34717b53f5c7de914c30ef2
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export type DeleteStreamMutationVariables = Types.Exact<{
  id: Types.Scalars['ObjectId'];
}>;
export type DeleteStreamMutation = {
  __typename?: 'Mutation';
  deleteStream: boolean;
};
export declare const DeleteStreamDocument: Apollo.DocumentNode;
export type DeleteStreamMutationFn = Apollo.MutationFunction<DeleteStreamMutation, DeleteStreamMutationVariables>;
/**
 * __useDeleteStreamMutation__
 *
 * To run a mutation, you first call `useDeleteStreamMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteStreamMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteStreamMutation, { data, loading, error }] = useDeleteStreamMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export declare function useDeleteStreamMutation(baseOptions?: Apollo.MutationHookOptions<DeleteStreamMutation, DeleteStreamMutationVariables>): Apollo.MutationTuple<DeleteStreamMutation, Types.Exact<{
  id: any;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export type DeleteStreamMutationHookResult = ReturnType<typeof useDeleteStreamMutation>;
export type DeleteStreamMutationResult = Apollo.MutationResult<DeleteStreamMutation>;
export type DeleteStreamMutationOptions = Apollo.BaseMutationOptions<DeleteStreamMutation, DeleteStreamMutationVariables>;