/* 135fc7f63eeab26f708adfc04fee2b6d959a8b80
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export type EditStreamMutationVariables = Types.Exact<{
  input: Types.StreamInput;
}>;
export type EditStreamMutation = {
  __typename?: 'Mutation';
  editStream: {
    __typename?: 'Stream';
    _id: any;
    title: string;
    description: string;
    url: string;
  };
};
export declare const EditStreamDocument: Apollo.DocumentNode;
export type EditStreamMutationFn = Apollo.MutationFunction<EditStreamMutation, EditStreamMutationVariables>;
/**
 * __useEditStreamMutation__
 *
 * To run a mutation, you first call `useEditStreamMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditStreamMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editStreamMutation, { data, loading, error }] = useEditStreamMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export declare function useEditStreamMutation(baseOptions?: Apollo.MutationHookOptions<EditStreamMutation, EditStreamMutationVariables>): Apollo.MutationTuple<EditStreamMutation, Types.Exact<{
  input: Types.StreamInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export type EditStreamMutationHookResult = ReturnType<typeof useEditStreamMutation>;
export type EditStreamMutationResult = Apollo.MutationResult<EditStreamMutation>;
export type EditStreamMutationOptions = Apollo.BaseMutationOptions<EditStreamMutation, EditStreamMutationVariables>;